{"version":3,"sources":["components/Filter.js","components/PersonForm.js","components/Button.js","components/Persons.js","services/services.js","components/Notification.js","App.js","serviceWorker.js","index.js"],"names":["Filter","filterName","handleFilterChange","value","onChange","PersonFrom","props","onSubmitAddContact","newName","handleNameChange","newNumber","handleNumberChange","onSubmit","type","required","Button","handleDeleteContact","text","onClick","className","Persons","persons","map","person","name","toLowerCase","includes","key","number","event","id","baseUrl","axios","get","then","response","data","newObject","post","put","delete","Notification","notification","message","classStyle","App","useState","setPersons","setNewName","setNewNumber","newFilterName","setFilterName","setNotification","useEffect","console","log","personService","initialContact","length","target","PersonForm","preventDefault","newPersonContact","newPersonList","isNewPerson","window","confirm","foundPerson","find","personContactChange","updatedPerson","setTimeout","catch","error","filter","JSON","stringify","newPerson","deleteId","deletePerson","isPerson","okCancel","deletedPerson","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.548888d0.chunk.js","sourcesContent":["import React from 'react';\n\nconst Filter = ({filterName, handleFilterChange}) => {\n    return (\n      <div>\n        filter shown with \n        <input value={filterName} onChange={handleFilterChange}/>\n      </div>\n    )\n  }\n\n\n  export default Filter;","import React from 'react';\n\n\n\nconst PersonFrom = (props) =>{\n    const {onSubmitAddContact, newName, handleNameChange, newNumber, handleNumberChange} =props;\n    return(\n        <div>\n             <form onSubmit={onSubmitAddContact}>\n                <div>\n                name: <input \n                            value={newName} \n                            onChange={handleNameChange}\n                            type=\"text\" \n                            required\n                            />\n                </div>\n                <div>\n                number: <input \n                            value={newNumber} \n                            onChange={handleNumberChange}\n                            type=\"number\"\n                            required \n                            />\n                </div>\n                <div>\n                <button type=\"submit\">add</button>\n                </div>\n            </form>\n        </div>\n    )\n}\n\nexport default PersonFrom;","\nimport React from 'react'\n\nconst Button = ({handleDeleteContact, text}) => {\n  return (\n    <button onClick={handleDeleteContact} className =\"buttonDelete\"> {text} </button>\n  )\n}\n\nexport default Button","import React from 'react';\nimport Button from './Button';\n\n\n\nconst Persons = ({handleDeleteContact, persons, filterName}) => {\n\n        const names = () => persons.map(person => {\n          if (person.name.toLowerCase().includes(filterName.toLowerCase())) {\n            return (<span key={person.name}>\n                    <p>{person.name}  {person.number} \n                    <Button  handleDeleteContact= {event => handleDeleteContact(person.id, event)}\n                                                          text =\"delete\"\n                                                           />  \n                    </p>                  \n                 </span>);\n          } else {\n            return '';\n          }\n        });\n    return (\n      <div>  \n           {names()}\n      </div>\n    )\n  }\n\n \n  export default Persons;","import axios from 'axios';\n//const baseUrl = 'http://localhost:3001/api/persons';\n//const baseUrl = 'https://peaceful-spire-58890.herokuapp.com/api/persons';\nconst baseUrl = '/api/persons';\n\n\n\nconst getAll = () => {\n  const request = axios.get(baseUrl)\n  return request.then(response => response.data)\n}\n\nconst create = newObject => {\n  const request = axios.post(baseUrl, newObject)\n  return request.then(response => response.data)\n}\n\nconst update = (id, newObject) => {\n  const request = axios.put(`${baseUrl}/${id}`, newObject)\n  return request.then(response => response.data)\n}\n\nconst deleteName = (id) => {\n  const request = axios.delete(`${baseUrl}/${id}`)\n  return request.then(response => response.data)\n}\n\nexport default { getAll, create, update, deleteName }","import React from 'react';\n\n  const Notification = ({notification}) => {\n    const {message, classStyle} = notification\n  \n  \n    if (message === null ) {\n      return null\n    }\n   \n    return (\n      <div className={classStyle}>\n      {message}\n      </div>\n    )\n}\n\nexport default Notification;\n","import React, { useState, useEffect } from 'react';\nimport './index.css';\nimport Filter from  './components/Filter';\nimport PersonForm from './components/PersonForm';\nimport Persons from './components/Persons';\nimport personService from './services/services';\nimport Notification from './components/Notification';\n\n\n\n\nconst App = () => {\n  const [ persons, setPersons] = useState([]);\n  const [ newName, setNewName ] = useState('');\n  const [ newNumber, setNewNumber ] = useState('');\n  const [ newFilterName, setFilterName ] = useState('');\n  const [ notification, setNotification ] = useState({message: '', \n                                                       classStyle: ''})\n\n  useEffect(() => {\n    console.log('effect')\n    personService\n        .getAll()\n        .then(initialContact => {\n          console.log('fetched data', initialContact)\n          setPersons(initialContact)\n        })\n  }, [])\n  console.log('render', persons.length, 'persons')\n  console.log('render Contact list ', persons, 'persons')\n \n  \n\n  const handleNameChange = (event) => {\n    console.log(\"Handle Name Change\",event.target.value);\n     setNewName(event.target.value) \n  };\n\n  const handleNumberChange = (event) => {\n    console.log(\"Handle Number Change\",event.target.value);\n    setNewNumber(event.target.value);\n  };\n\n\n  const handleFilterChange = (event) => {\n    console.log(\"Handle Filter Change\",event.target.value);\n    setFilterName(event.target.value)\n  };\n\n\n  const addContact =(event) =>{\n    event.preventDefault()\n    let  newPersonContact = {name: newName,\n                             number: newNumber\n                             };\n    console.log(\"Add contact\", newName)\n    console.log(\"Add contact person\", persons)\n    let newPersonList = persons.map(person => person.name);\n    console.log(\"New person list\", newPersonList)\n   \n    let isNewPerson= newPersonList.includes(newName)\n    console.log(\"check isNewPerson\", isNewPerson)\n  \n    if (isNewPerson){\n    let okCancel = window.confirm(`${newName} is already added to phonebook, replace the old one a with new one?`);\n    // alert(`${newName} is already added to phonebook, replace the old one a with new one?`) \n    if(okCancel){\n      let foundPerson = persons.find(person => person.name === newName) \n      let personContactChange = {...foundPerson, number: newPersonContact.number}\n      personService\n        .update(foundPerson.id, personContactChange)\n        .then(updatedPerson => {\n          setPersons(persons.map(person => person.id !== updatedPerson.id? person: updatedPerson))\n          console.log(\"New person added: \", updatedPerson)\n           setNotification({message: `Entry ${foundPerson.name} updated!`, classStyle: 'success'})\n            setTimeout(() => {\n              setNotification({})\n            }, 5000);\n            setNewNumber('')\n            setNewName('')\n        }).catch(error => {\n         console.log(error.response)\n\n          setPersons(persons.filter(person => person.id !== foundPerson.id))\n           setNotification({message: JSON.stringify(error.response.data.error), classStyle: 'error'})\n            setTimeout(() => {\n              setNotification({})\n            }, 5000);\n        }) \n        \n    }    \n\n    } else {\n        personService\n          .create(newPersonContact)\n          .then(newPerson => {\n            setPersons([...persons, newPerson])\n            console.log(\"New person added: \", newPerson)\n          setNotification({message: `Entry ${newPerson.name} added!`, classStyle: 'success'})\n            setTimeout(() => {\n            setNotification({})\n          }, 5000);\n          setNewName('')\n          setNewNumber('')\n        }).catch(error =>{\n          console.log(error.response.data)\n          setNotification({message:JSON.stringify(error.response.data.error), classStyle: 'error'})\n            setTimeout(() => {\n              setNotification({})\n            }, 5000);\n        })\n     \n    }\n  }\n\n  const handleDeleteContact =(deleteId, event) =>{\n    event.preventDefault()\n    //const Id = parseInt(event.target.value)\n    console.log(\"check handleDeleteContact\", persons,\" :\", deleteId)\n\n    const deletePerson  = persons.find(person => person.id === deleteId)\n  \n    console.log(\"name  to Delete\", deletePerson)\n   const newPersonList= persons.filter(person => person.id !== deleteId);\n   console.log(\"check isNewPerson\", newPersonList)\n  \n    let isPerson= newPersonList.includes(newName)\n    console.log(\"check isNewPerson\", isPerson)\n    let okCancel = window.confirm(`Delete ${deletePerson.name}`);\n    if (deletePerson && okCancel){\n       \n      personService\n      .deleteName(deleteId)\n      .then(deletedPerson => {\n        console.log(\"Add contact to persons\", deletedPerson)\n        setPersons(newPersonList)\n        setNotification({message: ` ${deletePerson.name} is just deleted from phonebook `, classStyle:'error'})\n          setTimeout(() => {\n            setNotification({})\n          }, 5000) \n      }).catch(error => {\n        console.log(error.response.data)  \n        setNotification({message: JSON.stringify(error.response.data.error), classStyle:'error'})\n          setTimeout(() => {\n            setNotification({})\n          }, 5000) \n        })\n  }\n  }\n\n  return (\n    <div id =\"content\">\n      <h2>Phonebook</h2>\n      <Notification notification ={notification} />\n      \n      <Filter \n        filterName={newFilterName} \n        handleFilterChange={handleFilterChange} \n      />\n\n       <h3>Add a new</h3>    \n\n      <PersonForm \n        onSubmitAddContact={addContact} \n        newName={newName} \n        handleNameChange={handleNameChange}\n        newNumber={newNumber}\n        handleNumberChange={handleNumberChange}\n      />\n\n      <h3>Numbers</h3>\n\n      <Persons \n        handleDeleteContact = {handleDeleteContact}\n        persons ={persons}\n        filterName = {newFilterName}\n      />\n    </div>\n  )\n}\n\nexport default App","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\n\n\n\n\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}